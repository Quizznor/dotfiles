snippet img "A snippet for includegraphics" i
$1`!p snip.rv = complete(t[1],get_img_files(snip.fn))`}
endsnippet

snippet \input "A snippet for input" i
\input{$1`!p snip.rv = complete(t[1],get_tex_files(snip.fn))`}
endsnippet

snippet \ref "A snippet for autoref" i
\autoref{$1`!p snip.rv = complete(t[1],get_labels(snip.fn))`}
endsnippet

snippet \pageref "A snippet for pageref" iA
\pageref{$1`!p snip.rv = complete(t[1],get_labels(snip.fn))`}
endsnippet

snippet \t "A snippet for \text" i
\text{$1} $2
endsnippet

snippet \fat "A snippet for \textbf" iA
\textbf{$1} $2
endsnippet

snippet \it "A snippet for \textit" iA
\textit{$1} $2
endsnippet

snippet \i "A snippet for \item" b
\item $0
endsnippet

snippet \frac "A snippet for fractions" iA
\frac{$1}{$2}$3
endsnippet

snippet \chap "Snippet for chapters" b
\chapter{${1:NAME}}
\label{chap:${2:LABEL}}

$3
endsnippet

snippet \sec "Snippet for sections" b
\section{${1:NAME}}
\label{sec:${2:LABEL}}

$3
endsnippet

snippet \sub "Snippet for subsections" b
\subsection{${1:NAME}}
\label{ssec:${2:LABEL}}

$3
endsnippet

snippet \subsub "Snippet for subsubsections" b
\subsubsection{${1:NAME}}
\label{sssec:${2:LABEL}}

$3
endsnippet

snippet \beg "Snippet for environments" bA
\begin{${1:ENVIRONMENT}}
$2
\end{$1}

--
endsnippet

snippet eq "A snippet for equations" b
\label{eq:${1:LABEL}}
$2
endsnippet

snippet fig "A snippet for figures" b
	\centering
	\includegraphics[width=${1:1.0}\textwidth]{${2:PATH}}
	\caption{${3:CAPTION}}
	\label{${4:LABEL}}
endsnippet

snippet twofig "A snippet for two figures" b
	\centering
	\begin{subfigure}[h]{0.45\linewidth}
	\includegraphics[height=4.2cm]{${1:PATH A}}
	\caption{\textbf{${2:TITLE A}}\label{fig:${3:LABEL A}}}
	\end{subfigure}
	\hfill
	\begin{subfigure}[h]{0.45\linewidth}
	\includegraphics[height=4.2cm]{${4:PATH B}}
	\caption{\textbf{${5:TITLE B}}\label{fig:${6:LABEL B}}}
	\end{subfigure}
	\caption*{\textbf{a)} ${7:CAPTION A}. \textbf{b)} ${8:CAPTION B}\label{${9:LABEL}}}
endsnippet

snippet tab "A snippet for tables" b
\begingroup
\renewcommand{\arraystretch}{${1:STRETCH}}
\begin{table}
	\begin{center}
	\caption{${2:CAPTION}}
	\begin{tabular*}{${3:0.9}\textwidth}{@{\extracolsep{\fill}} ${4:COLUMNS}}
  \toprule
	\hline
  ${5:COLUMN LABELS} \\
	\hline
  ${6:VALUES}
  \bottomrule
	\end{tabular*}
	\label{tab:${7:LABEL}}
	\end{center}
\end{table}
\endgroup

endsnippet

# PYTHON STUFF ------------------------------------

global !p

# Return all files in directory with subdirectory
def get_files(dir):
    files = os.listdir(dir)
    all_files = list()

    for entry in files:
        full_path = os.path.join(dir, entry)
        if os.path.isdir(full_path):
            all_files = all_files + get_files(full_path)
        else:
            all_files.append(full_path)

    return all_files


# get LaTeX root file
def get_LaTeX_root(filename):

  with open(filename) as f:
    header = f.readline().strip()
  if header.startswith("%"):
    root_file = "./" + header[13:]
  else:
    root_file = filename

  root_path = os.path.dirname(root_file)

  return root_path

# return list of all labels in root tex document
def get_labels(filename):

  regexp = re.compile("label{[a-z]{2,4}:.*(?=\})")

  root_path = get_LaTeX_root(filename)
  candidates = [file for file in get_files(root_path) if file.endswith(".tex")]

  labels = []
  for candidate in candidates:
    text = open(candidate,"r").read()
    if "\label" in text:
      labels.append(regexp.findall(text))

  labels = [item for sublist in labels for item in sublist]
  labels = [item[6:] for item in labels]

  return labels


# get tex files from latex root
def get_tex_files(filename):

  root_path = get_LaTeX_root(filename)
  files = get_files(root_path)
  tex_files = [file for file in files if file.endswith(".tex")]

  with open(filename) as f:
    header = f.readline().strip()
  if header.startswith("%"):
    tex_files = [file.replace("/"+os.path.dirname(header[13:]),"") for file in tex_files]

  return tex_files


# get image files from latex root
def get_img_files(filename):

  root_path = get_LaTeX_root(filename)
  files = get_files(root_path)
  img_files = [file for file in files if file.endswith(".jpg") or file.endswith(".png")]

  with open(filename) as f:
    header = f.readline().strip()
  if header.startswith("%"):
    img_files = [file.replace("/"+os.path.dirname(header[13:]),"") for file in img_files]

  return img_files


# Autocompletion given a string t and options
def complete(t,options):
  if t:
    options = [item[len(t):] for item in options if item.startswith(t)]

  if len(options)==1:
    return options[0]

  return "(" + " | ".join(options) + ")"
endglobal
